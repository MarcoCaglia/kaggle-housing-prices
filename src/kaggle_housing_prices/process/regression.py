"""Regression module for housing price prediction."""

from __future__ import annotations

from abc import ABC, abstractmethod
from typing import Any, Tuple, Union

import numpy as np
import numpy.typing as npt
import pandas as pd


class BaseRegressor(ABC):
    """Template class for classification classes."""

    @abstractmethod
    def __init__(self, **kwargs) -> None:
        """Initialize regressor class."""
        for attr, value in kwargs.items():
            setattr(self, attr, value)

    @abstractmethod
    def fit(
        self, X: pd.DataFrame, y: npt.NDArray[np.float32], **kwargs
    ) -> BaseRegressor:
        """Fit regression model to observed features and labels.

        Args:
            X (pd.DataFrame): Features generated by feature engineering.
            y (npt.NDArray[np.float32]): Observed labels in training data.

        Returns:
            BaseRegressor: Fit instance of self.
        """

    @abstractmethod
    def predict(
        self, X: pd.DataFrame, y: Union[npt.NDArray[np.float32], None] = None, **kwargs
    ) -> Tuple[npt.NDArray[np.float32], Any]:
        """Predict labels from engineered input features.

        If observed prices are included, the regression report will include
        additional label-dependent metrics.

        Args:
            X (pd.DataFrame): Engineered input features.
            y (Union[npt.NDArray[np.float32], None], optional): Observed
                labels. Defaults to None.

        Returns:
            Tuple[npt.NDArray[np.float32], Any]: Tuple of predicted values and
                regression metrics.
        """
